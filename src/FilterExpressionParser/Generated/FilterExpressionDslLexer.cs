//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FilterExpressionDsl.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FilterExpressionDslLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GreaterThan=1, GreaterThanEqual=2, LessThan=3, LessThanEqual=4, Equal=5, 
		Or=6, And=7, IN=8, OpenParen=9, CloseParen=10, VARIABLE=11, NUMBER=12, 
		STRING=13, WHITESPACE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", "Equal", 
		"Or", "And", "IN", "OpenParen", "CloseParen", "VARIABLE", "NUMBER", "STRING", 
		"WHITESPACE"
	};


	public FilterExpressionDslLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FilterExpressionDslLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'>='", "'<'", "'<='", "'='", null, null, "'in'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GreaterThan", "GreaterThanEqual", "LessThan", "LessThanEqual", 
		"Equal", "Or", "And", "IN", "OpenParen", "CloseParen", "VARIABLE", "NUMBER", 
		"STRING", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FilterExpressionDsl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FilterExpressionDslLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x10', '\\', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x30', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x38', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', '\x43', '\n', '\f', '\r', '\f', '\xE', 
		'\f', '\x44', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', 'J', 
		'\n', '\r', '\r', '\r', '\xE', '\r', 'K', '\x3', '\xE', '\x3', '\xE', 
		'\x6', '\xE', 'P', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'Q', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x6', '\xF', 'W', '\n', '\xF', '\r', 
		'\xF', '\xE', '\xF', 'X', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x3', '\x2', '\x5', '\x4', 
		'\x2', '\x43', '\\', '\x63', '|', '\x3', '\x2', '\x32', ';', '\x5', '\x2', 
		'\v', '\f', '\xE', '\xF', '\"', '\"', '\x2', '\x61', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x5', '!', '\x3', '\x2', '\x2', '\x2', 
		'\a', '$', '\x3', '\x2', '\x2', '\x2', '\t', '&', '\x3', '\x2', '\x2', 
		'\x2', '\v', ')', '\x3', '\x2', '\x2', '\x2', '\r', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '<', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x17', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'I', '\x3', '\x2', '\x2', '\x2', '\x1B', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'V', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '@', 
		'\x2', '\x2', ' ', '\x4', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', 
		'@', '\x2', '\x2', '\"', '#', '\a', '?', '\x2', '\x2', '#', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\a', '>', '\x2', '\x2', '%', '\b', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\a', '>', '\x2', '\x2', '\'', '(', '\a', 
		'?', '\x2', '\x2', '(', '\n', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', 
		'?', '\x2', '\x2', '*', '\f', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 
		'q', '\x2', '\x2', ',', '\x30', '\a', 't', '\x2', '\x2', '-', '.', '\a', 
		'Q', '\x2', '\x2', '.', '\x30', '\a', 'T', '\x2', '\x2', '/', '+', '\x3', 
		'\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x63', '\x2', '\x2', 
		'\x32', '\x33', '\a', 'p', '\x2', '\x2', '\x33', '\x38', '\a', '\x66', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\x43', '\x2', '\x2', '\x35', '\x36', 
		'\a', 'P', '\x2', '\x2', '\x36', '\x38', '\a', '\x46', '\x2', '\x2', '\x37', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x37', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x10', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', 
		'k', '\x2', '\x2', ':', ';', '\a', 'p', '\x2', '\x2', ';', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\a', '*', '\x2', '\x2', '=', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\a', '+', '\x2', '\x2', '?', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x42', '\a', '<', '\x2', '\x2', '\x41', '\x43', 
		'\t', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '<', '\x2', '\x2', 'G', 
		'\x18', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\t', '\x3', '\x2', '\x2', 
		'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1A', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\a', ')', '\x2', '\x2', 
		'N', 'P', '\t', '\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', ')', '\x2', '\x2', 'T', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\t', '\x4', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '[', '\b', '\xF', '\x2', '\x2', '[', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x2', '/', '\x37', '\x44', 'K', 'Q', 'X', '\x3', '\x2', 
		'\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
